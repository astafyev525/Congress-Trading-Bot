
services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: congressional_trading_db
    environment:
      POSTGRES_DB: congressional_trading
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: "30s"
      timeout: "10s"
      retries: 3
      start_period: "5s"
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: congressional_trading_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "30s"
      timeout: "10s"
      retries: 3
    networks:
      - app-network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: congressional_trading_api
    env_file:
      - .env.docker
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Celery Worker (Background Jobs)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: congressional_trading_worker
    env_file:
      - .env.docker
    command: celery -A app.tasks worker --loglevel=info
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: congressional_trading_scheduler
    env_file:
      - .env.docker
    command: celery -A app.tasks beat --loglevel=info
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge